#version: "3.9"
services:
  
  # Zookeeper per Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5



  # Container SegnalazioneUtenti 
  segnalazione_utenti:
    build:
      context: ./SegnalazioneUtenti
      dockerfile: Dockerfile
    container_name: segnalazione-utenti
    command: python3 appSegnalazioneUtenti.py
    depends_on:
      - kafka
    ports:
      - "5006:5006"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092



  # Container AnalisiDati
  analisi_dati:
    build: 
      context: ./AnalisiDati
      dockerfile: Dockerfile
    container_name: analisi-dati
    command: python3 appAnalisiDati.py
    ports:
      - "5001:5001"
    depends_on:
      kafka:
        condition: service_healthy


  # Container RaccoltaDati
  raccolta_dati:
    build: 
      context: ./RaccoltaDati
      dockerfile: Dockerfile
    container_name: raccolta-dati
    command: python3 appRaccoltaDati.py
    environment:
      - ANALISI_URL=http://analisi_dati:5001/analizza
    ports:
      - "5005:5005"
    depends_on:
    - analisi_dati

  #Container dynamodb
  dynamodb:
    image: amazon/dynamodb-local
    container_name: dynamodb
    ports:
      - "8000:8000"
    command: ["-jar", "DynamoDBLocal.jar", "-sharedDb"]

  #Container GestionePreferiti
  gestione_preferiti:
    build: ./GestionePreferiti  
    container_name: gestione-preferiti
    depends_on:
      - dynamodb  
      - gestione_utente
    environment:  
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_SESSION_TOKEN: "${AWS_SESSION_TOKEN}"
      AWS_REGION: "us-east-1"
    ports:
      - "5004:5004"

  #Container GestioneUtente
  gestione_utente:
    build: ./GestioneUtente
    container_name: gestione-utente
    depends_on:
      - dynamodb
    environment:
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_SESSION_TOKEN: "${AWS_SESSION_TOKEN}"
      AWS_REGION: "us-east-1"
      DYNAMODB_TABLE: "Users"
    ports:
     - "5002:5001" 

  #Container Frontend
  frontend:
    build: ./Frontend
    container_name: frontend
    depends_on:
      - gestione_utente
      - gestione_preferiti
      - kafka
      - notifica
    stdin_open: true
    tty: true
    ports:
      - "3000:3000" 

  #Container InizializzazioneTopic
  init_topics:
    build: ./InizializzazioneTopic
    container_name: init-topics
    command: python3 appInizializzazioneTopic.py
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./InizializzazioneTopic/fiumi_sottobacini.json:/app/fiumi_sottobacini.json

  notifica:
    build:
      context: ./Notifica
    container_name: notifica
    depends_on:
      - kafka
      - gestione_utente
      - gestione_preferiti
    environment:
      PREFERITI_URL: "http://gestione_preferiti:5004/controllo_preferiti"
    ports:
      - "5007:5007"




